////=========================================================================================================
////
//// 粒子の処理 [Particle.cpp]
//// Author : yabuki yukito
////
////=========================================================================================================
//
//#include"Particle.h"
//
////=========================================================================================================
////メイン関数
////=========================================================================================================
//
////+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
////マクロ定義
////+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//#define MAX_PARTICLE (128)									//パーティクルの最大数
//
////+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
////パーティクル構造体
////+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//typedef struct
//{
//	D3DXVECTOR3 pos;										//位置(発生位置)
//	int nLife;												//寿命(発生時間)
//	bool bUse;												//使用しているかどうか
//}Particle;
//
////+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
////グローバル変数
////+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//Particle g_aParticle[MAX_PARTICLE];							//パーティクルの情報
//LPDIRECT3DTEXTURE9 g_pTextureParticle = NULL;				//テクスチャへのポインタ
//LPDIRECT3DVERTEXBUFFER9 g_pVtxBuffParticle = NULL;			//頂点バッファへのポインタ
//
////=========================================================================================================
////粒子の初期化処理
////=========================================================================================================
//void InitParticle(void)
//{
//	LPDIRECT3DDEVICE9 pDevice;
//
//	//デバイスの取得
//	pDevice = GetDevice();
//
//
//
//	//頂点情報へのポインタ
//	VERTEX_2D* pVtx;
//
//	//頂点バッファをロックし、頂点情報へのポインタを取得
//	g_pVtxBuffParticle->Lock(0, 0, (void**)&pVtx, 0);
//
//	//頂点情報をアンロック
//	g_pVtxBuffParticle->Unlock();
//
//
//}
//
////=========================================================================================================
////粒子の終了処理
////=========================================================================================================
//void UninitParticle(void)
//{
//	////頂点バッファの破棄
//	//if (g_pVtxBuffParticle != NULL)
//	//{
//	//	g_pVtxBuffParticle->Release();
//	//	g_pVtxBuffParticle = NULL;
//	//}
//}
//
////=========================================================================================================
////粒子の更新処理
////=========================================================================================================
//void UpdateParticle(void)
//{
//	int nCntParticle;
//	int nCntAppear;
//	for (nCntParticle = 0; nCntParticle < MAX_PARTICLE; nCntParticle++)
//	{
//		if (g_aParticle[nCntParticle].bUse == true)
//		{
//			//		//パーティクルの生成
//			//		if(//寿命が尽きた)
//			//			{
//			//				g_aParticle[nCntParticle].bUse = false;
//			//			}
//			//	}
//			//}
//			//for (nCntAppear = 0; nCntAppear <//発生させたい粒子の数; nCntAppear++)
//			//{
//			//	//位置の設定
//
//			//	//移動量の設定
//
//			//	//色の設定
//
//			//	//寿命の設定
//
//			//	//エフェクトの設定
//			//}
//		}
//	}
//}
//
////=========================================================================================================
////粒子の描画処理
////=========================================================================================================
//void DrawParticle(void)
//{
//
//}
//
////=========================================================================================================
////粒子の設定処理
////=========================================================================================================
//void SetParticle(D3DXVECTOR3 pos)
//{
//
//}
