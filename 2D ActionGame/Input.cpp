//=========================================================================================================
//
// 入力の処理 [Input.cpp]
// Author : yabuki yukito
//
//=========================================================================================================

#include "input.h"

//=========================================================================================================
//メイン関数
//=========================================================================================================

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//マクロ定義
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#define NUM_KEY_MAX (256)									//キーの最大数

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//グローバル変数
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
LPDIRECTINPUT8 g_pInput = NULL;
LPDIRECTINPUTDEVICE8 g_pDevKeyboard = NULL;
BYTE g_aKeyState[NUM_KEY_MAX];								//キーボードのプレス情報
BYTE g_aOldState[NUM_KEY_MAX];								//フレーム前の情報
XINPUT_STATE g_joyKeyState;									//ジョイパッドのプレス情報
	
//=========================================================================================================
//キーボードの初期化処理
//=========================================================================================================
HRESULT InitKeyboard(HINSTANCE hInstance, HWND hWnd)
{
	//DirectInputオブジェクトの生成
	if (FAILED(DirectInput8Create(hInstance, DIRECTINPUT_VERSION,
		IID_IDirectInput8, (void**)&g_pInput, NULL)))
	{
		return E_FAIL;
	}
	//入力デバイス(キーボードの処理
	if (FAILED(g_pInput->CreateDevice(GUID_SysKeyboard, &g_pDevKeyboard, NULL)))
	{
		return E_FAIL;
	}
	//データフォーマットの設定
	if (FAILED(g_pDevKeyboard->SetDataFormat(&c_dfDIKeyboard)))
	{
		return E_FAIL;
	}
	//協調モードの設定
	if (FAILED(g_pDevKeyboard->SetCooperativeLevel(hWnd,
		(DISCL_FOREGROUND | DISCL_NONEXCLUSIVE))))
	{
		return E_FAIL;
	}
	//キーボードへのアクセス権を獲得
	g_pDevKeyboard->Acquire();
	return S_OK;
}

//=========================================================================================================
//キーボードの終了処理
//=========================================================================================================
void UninitKeyboard(void)
{
	//入力デバイス(キーボード)の破棄
	if (g_pDevKeyboard != NULL)
	{
		g_pDevKeyboard->Unacquire();						//キーボードのアクセス権を破棄
		g_pDevKeyboard->Release();
		g_pDevKeyboard = NULL;
	}
}

//=========================================================================================================
//キーボードの更新処理
//=========================================================================================================
void UpdateKeyboard(void)
{
	BYTE aKeyState[NUM_KEY_MAX];							//キーボードの入力情報
	int nCntKey;
	for (nCntKey = 0; nCntKey < NUM_KEY_MAX; nCntKey++)
	{
		g_aOldState[nCntKey] = g_aKeyState[nCntKey];		//1つ前のキーボードのプレス情報を保存
	}
	//入力デバイスからデータを取得
	if (SUCCEEDED(g_pDevKeyboard->GetDeviceState(sizeof(aKeyState), &aKeyState[0])))
	{
		for (nCntKey = 0; nCntKey < NUM_KEY_MAX; nCntKey++)
		{
			g_aOldState[nCntKey] = g_aKeyState[nCntKey];	//前フレームの情報
			g_aKeyState[nCntKey] = aKeyState[nCntKey];		//キーボードのプレス情報の保存
		}
	}
	else
	{
		g_pDevKeyboard->Acquire();							//キーボードへのアクセス権を獲得
	}
}

//=========================================================================================================
//キーボードのプレス情報を取得する処理
//=========================================================================================================
bool GetKeyboardPress(int nKey)
{
	return (g_aKeyState[nKey] & 0x80) ? true : false;
}

//=========================================================================================================
//キーボードのトリガー情報を取得する処理
//=========================================================================================================
bool KeyboardTrigger(int nKey)
{
	bool Trigger = false;
	if (g_aKeyState[nKey] & 0x80 && !(g_aOldState[nKey] & 0x80))
	{
		Trigger = true;
	}
	return Trigger;
}

//=========================================================================================================
//キーボードのリリース情報を取得する処理
//=========================================================================================================
bool KeyboardRelease(int nKey)
{
	bool Trigger = false;
	if (g_aOldState[nKey] & 0x80 && !(g_aKeyState[nKey] & 0x80))
	{
		Trigger = true;
	}
	return Trigger;
}

//=========================================================================================================
//キーボードのリピート情報を取得する処理
//=========================================================================================================
bool KeyboardRepeat(int nKey)
{
	bool Trigger = false;
	if (g_aOldState[nKey] & 0x80 && (g_aKeyState[nKey] & 0x80))
	{
		Trigger = true;
	}
	return Trigger;
}

//=========================================================================================================
//ジョイパッドの初期化処理
//=========================================================================================================
HRESULT InitJoypad(void)
{//メモリのクリア
	memset(&g_joyKeyState, 0, sizeof(XINPUT_STATE));

	//XInputのステートの設定(有効にする)
	XInputEnable(true);

	return S_OK;
}

//=========================================================================================================
//ジョイパッドの終了処理
//=========================================================================================================
void UninitJoypad(void)
{//XInputのステートの設定(無効にする)
	XInputEnable(false);
}

//=========================================================================================================
//ジョイパッドの更新処理
//=========================================================================================================
void UpdateJoypad(void)
{//ジョイパッドの入力情報
	XINPUT_STATE joyKeyState;

	//ジョイパッドの状態を取得
	if (XInputGetState(0, &joyKeyState) == ERROR_SUCCESS)
	{
		//ジョイパッドのプレス情報を保存
		g_joyKeyState = joyKeyState; 
	}
}

//=========================================================================================================
//ジョイパッドのプレス情報を取得する処理
//=========================================================================================================
bool JoypadPress(JOYKEY key)
{
	return (g_joyKeyState. Gamepad.wButtons & (0x01 << key)) ? true : false;
}
